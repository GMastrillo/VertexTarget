# content_agent.py
import google.generativeai as genai
import os
from dotenv import load_dotenv
import json
from pymongo import MongoClient

# --- 1. CONFIGURA√á√ÉO E CONEX√ÉO ---

print(">>> A iniciar o Agente de Conte√∫do...")

# Carrega as vari√°veis de ambiente do ficheiro .env
# Garante que os ficheiros .env no root e no backend s√£o carregados
load_dotenv()
load_dotenv(os.path.join(os.path.dirname(__file__), 'backend', '.env'))

# Configura√ß√£o da API do Gemini
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("‚ùå ERRO: A chave da API do Gemini (GEMINI_API_KEY) n√£o foi encontrada no ficheiro .env")
    exit()
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-pro-latest')

# Configura√ß√£o da Conex√£o com o MongoDB
MONGO_URI = os.getenv("MONGO_URL")
if not MONGO_URI:
    print("‚ùå ERRO: A chave de conex√£o do MongoDB (MONGO_URL) n√£o foi encontrada.")
    exit()

try:
    print(">>> A conectar-se ao MongoDB Atlas...")
    client = MongoClient(MONGO_URI)
    db = client.vertex_target_db # Use o mesmo nome de base de dados do seu server.py
    # Testa a conex√£o
    client.admin.command('ping')
    print("‚úÖ Conex√£o com o MongoDB estabelecida com sucesso!")
except Exception as e:
    print(f"‚ùå ERRO: Falha ao conectar com o MongoDB. Detalhe: {e}")
    exit()

# --- 2. PROMPT PARA GERA√á√ÉO DE CONTE√öDO ---

prompt_para_ia = """
Voc√™ √© um Diretor de Marketing e Conte√∫do da ag√™ncia de tecnologia "Vertex Target".
A Vertex Target √© especializada em 3 √°reas:
1.  Marketing Digital de Performance
2.  Desenvolvimento Web/Mobile (FinTech, HealthTech, etc.)
3.  Automa√ß√£o com Intelig√™ncia Artificial

Sua tarefa √© gerar conte√∫do para o novo site da ag√™ncia. O conte√∫do deve ser profissional, realista e demonstrar expertise.

Gere uma resposta em formato JSON contendo duas listas: "portfolio_items" e "testimonials".

**1. portfolio_items:**
   - Crie 3 projetos de portf√≥lio fict√≠cios, um para cada √°rea de especializa√ß√£o.
   - Para o campo "image", use URLs de placeholder do site `https://placehold.co/`. Formato: `https://placehold.co/600x400/5d3a9b/ffffff?text=Nome+Do+Projeto`.
   - Preencha todos os campos do modelo Pydantic `PortfolioItemCreate` do nosso backend. Os campos s√£o: title, category, image, metric, description, technologies, results, challenge, solution, outcome.

**2. testimonials:**
   - Crie 2 depoimentos fict√≠cios de clientes.
   - Os clientes e os projetos mencionados devem ser consistentes com os projetos criados acima.
   - Para o campo "avatar", use URLs de placeholder do site `https://i.pravatar.cc/150?u=email@cliente.com`.
   - Preencha todos os campos do modelo Pydantic `TestimonialCreate`. Os campos s√£o: name, position, company, avatar, quote, rating, project.

O JSON final deve ser v√°lido e pronto para ser usado. N√£o adicione nenhum texto ou explica√ß√£o fora do bloco JSON.
"""

# --- 3. EXECU√á√ÉO E INSER√á√ÉO NA BASE DE DADOS ---

def popular_base_de_dados():
    """
    Fun√ß√£o principal que gera o conte√∫do e o insere na base de dados.
    """
    try:
        print("\n>>> A gerar conte√∫do com a API do Gemini... Isto pode demorar um momento.")
        resposta = model.generate_content(prompt_para_ia)
        
        # Limpa a resposta para garantir que √© um JSON v√°lido
        json_text = resposta.text.strip().replace("```json", "").replace("```", "")
        dados = json.loads(json_text)
        
        portfolio_items = dados.get("portfolio_items", [])
        testimonials = dados.get("testimonials", [])
        
        if not portfolio_items or not testimonials:
            print("‚ùå ERRO: A IA n√£o retornou o conte√∫do esperado. A tentar novamente.")
            return

        print(f"‚úÖ Conte√∫do gerado com sucesso: {len(portfolio_items)} projetos e {len(testimonials)} depoimentos.")
        
        # Inserir na base de dados
        print(">>> A inserir conte√∫do na base de dados...")
        
        # Limpa as cole√ß√µes existentes para evitar duplicados
        db.portfolio.delete_many({})
        db.testimonials.delete_many({})
        print("    - Cole√ß√µes antigas limpas.")
        
        # Insere os novos dados
        if portfolio_items:
            db.portfolio.insert_many(portfolio_items)
            print(f"    - {len(portfolio_items)} projetos inseridos na cole√ß√£o 'portfolio'.")
        if testimonials:
            db.testimonials.insert_many(testimonials)
            print(f"    - {len(testimonials)} depoimentos inseridos na cole√ß√£o 'testimonials'.")
            
        print("\nüéâ MISS√ÉO CUMPRIDA! A base de dados foi populada com sucesso.")
        print("Verifique o seu site. O novo conte√∫do e as imagens devem estar a aparecer.")

    except Exception as e:
        print(f"\n‚ùå Ocorreu um erro durante a execu√ß√£o: {e}")

if __name__ == "__main__":
    popular_base_de_dados()